<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FailedAlreadyRegisteredEmail" xml:space="preserve">
    <value>A user is already registered with this email.</value>
  </data>
  <data name="FailedAlreadyRegisteredUser" xml:space="preserve">
    <value>A user is already registered with this username.</value>
  </data>
  <data name="FailedDataSizeCharacter" xml:space="preserve">
    <value>One or more data from the User have been submitted with errors {0}</value>
  </data>
  <data name="FailedEmailInvalidFormat" xml:space="preserve">
    <value>The given email is not in a valid format</value>
  </data>
  <data name="FailedEmailService" xml:space="preserve">
    <value>It happened an error in the email service.</value>
  </data>
  <data name="FailedNecesaryData" xml:space="preserve">
    <value>Necessary data was not provided.</value>
  </data>
  <data name="FailedNotRegisteredEmail" xml:space="preserve">
    <value>This email is not registered by any user.</value>
  </data>
  <data name="FailedOccurredDataLayer" xml:space="preserve">
    <value>An error occurred in the data layer.</value>
  </data>
  <data name="FailedOtpService" xml:space="preserve">
    <value>It happened an error in the OTP service.</value>
  </data>
  <data name="FailedRecaptchaService" xml:space="preserve">
    <value>It happened an error in the Recaptcha service.</value>
  </data>
  <data name="FailedUserDoesNotExist" xml:space="preserve">
    <value>The user does not exist.</value>
  </data>
  <data name="FailedUsernameInvalidFormat" xml:space="preserve">
    <value>The given username is not in a valid format</value>
  </data>
  <data name="FailedUserNotFound" xml:space="preserve">
    <value>The user was not found - unable to create the session.</value>
  </data>
  <data name="GenericToActiveNotExist" xml:space="preserve">
    <value>The {0} you are trying to active does not exist.</value>
  </data>
  <data name="GenericToDeleteNotExist" xml:space="preserve">
    <value>The {0} you are trying to delete does not exist.</value>
  </data>
  <data name="GenericToInactiveNotExist" xml:space="preserve">
    <value>The {0} you are trying to inactive does not exist.</value>
  </data>
  <data name="GlobalOkMessage" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="OtpFailedDoesNotEquals" xml:space="preserve">
    <value>The OTP does not equal.</value>
  </data>
  <data name="OtpFailedDoesNotExist" xml:space="preserve">
    <value>The OTP does not exist.</value>
  </data>
  <data name="OtpFailedDoesNotSubmitted" xml:space="preserve">
    <value>The OTP was not submitted.</value>
  </data>
  <data name="SuccessfullyEmail" xml:space="preserve">
    <value>The email was sent successfully.</value>
  </data>
  <data name="SuccessfullyFind" xml:space="preserve">
    <value>The entity was found by id successfully</value>
  </data>
  <data name="SuccessfullyGeneric" xml:space="preserve">
    <value>{0} was created successfully.</value>
  </data>
  <data name="SuccessfullyGenericActiveated" xml:space="preserve">
    <value>{0} was activated successfully.</value>
  </data>
  <data name="SuccessfullyGenericDeleted" xml:space="preserve">
    <value>{0} was deleted successfully.</value>
  </data>
  <data name="SuccessfullyGenericDisabled" xml:space="preserve">
    <value>{0} was disabled successfully.</value>
  </data>
  <data name="SuccessfullyGenericUpdated" xml:space="preserve">
    <value>{0} was updated successfully.</value>
  </data>
  <data name="SuccessfullyLogin" xml:space="preserve">
    <value>The user was loging successfully.</value>
  </data>
  <data name="SuccessfullyOTPGenerate" xml:space="preserve">
    <value>The OTP code was generated successfully.</value>
  </data>
  <data name="SuccessfullyOTPValidate" xml:space="preserve">
    <value>The OTP code was validated successfully.</value>
  </data>
  <data name="SuccessfullyRecaptcha" xml:space="preserve">
    <value>The reCAPTCHA code was validated successfully.</value>
  </data>
  <data name="SuccessfullySearchGeneric" xml:space="preserve">
    <value>The search in the {0} entity completed successfully.</value>
  </data>
  <data name="SuccessfullySearchUser" xml:space="preserve">
    <value>The search in the User entity completed successfully.</value>
  </data>
  <data name="SuccessfullySetNewPassword" xml:space="preserve">
    <value>The password was updated successfully.</value>
  </data>
  <data name="SuccessfullyUser" xml:space="preserve">
    <value>User was created successfully.</value>
  </data>
  <data name="SuccessfullyUserActiveated" xml:space="preserve">
    <value>User was activated successfully.</value>
  </data>
  <data name="SuccessfullyUserDeleted" xml:space="preserve">
    <value>User was deleted successfully.</value>
  </data>
  <data name="SuccessfullyUserDisabled" xml:space="preserve">
    <value>User was disabled successfully.</value>
  </data>
  <data name="SuccessfullyUserUpdated" xml:space="preserve">
    <value>User was updated successfully.</value>
  </data>
  <data name="SuccessfullyValidateEmail" xml:space="preserve">
    <value>The email was validated successfully.</value>
  </data>
  <data name="UserFailedPassword" xml:space="preserve">
    <value>The given username or password is incorrect.</value>
  </data>
  <data name="UserToActiveNotExist" xml:space="preserve">
    <value>The user you are trying to active does not exist.</value>
  </data>
  <data name="UserToDeleteNotExist" xml:space="preserve">
    <value>The user you are trying to delete does not exist.</value>
  </data>
  <data name="UserToInactiveNotExist" xml:space="preserve">
    <value>The user you are trying to inactive does not exist.</value>
  </data>
</root>